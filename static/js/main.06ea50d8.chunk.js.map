{"version":3,"sources":["helpers.js","App.js","serviceWorker.js","index.js"],"names":["getDataFromExcel","file","Promise","resolve","reject","reader","FileReader","onload","e","data","Uint8Array","target","result","workbook","xlsx","read","type","cellDates","dateNF","Object","keys","Sheets","firstSheetName","firstSheet","sheet","rows","utils","sheet_to_json","header","firstRow","dataSheet","forEach","row","index","rowData","key","text","headerName","toString","replace","trim","push","values","formatExcelData","onerror","readAsArrayBuffer","App","inputRef","useRef","useState","schemaText","setSchemaText","errors","setErrors","validateSchema","JSON","parse","console","log","validate","a","current","files","alert","item","required","includes","field","i","length","value","undefined","isNaN","parseInt","className","ref","onChange","cols","onClick","map","error","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.06ea50d8.chunk.js","sourcesContent":["import xlsx from \"xlsx\";\n\nexport const removeAllBreakLineChar = (text) => {\n  if (!text) {\n    return text;\n  }\n\n  return text\n    .toString()\n    .replace(/\\r?\\n|\\r/g, \"\")\n    .trim();\n};\n\nconst formatExcelData = (sheet) => {\n  const rows = xlsx.utils.sheet_to_json(sheet, {\n    header: \"A\",\n  });\n  const firstRow = rows?.[0] || {};\n  const dataSheet = [];\n  rows.forEach((row, index) => {\n    if (index === 0) {\n      return;\n    }\n    const rowData = {};\n    Object.keys(row).forEach((key) => {\n      const headerName = removeAllBreakLineChar(firstRow[key]);\n      rowData[headerName] = row[key];\n    });\n    dataSheet.push(rowData);\n  });\n\n  return {\n    data: dataSheet,\n    header: Object.values(firstRow),\n  };\n};\n\nexport const getDataFromExcel = (file) =>\n  new Promise((resolve, reject) => {\n    try {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const data = new Uint8Array(e.target.result);\n        const workbook = xlsx.read(data, {\n          type: \"array\",\n          cellDates: true,\n          dateNF: \"yyyy/mm/dd\",\n        });\n        const [firstSheetName] = Object.keys(workbook.Sheets);\n        const firstSheet = workbook.Sheets[firstSheetName];\n\n        resolve(formatExcelData(firstSheet));\n      };\n      reader.onerror = (e) => {\n        reject(e);\n      };\n\n      reader.readAsArrayBuffer(file);\n    } catch (e) {\n      reject(e);\n    }\n  });\n","import React, { useRef, useState } from \"react\";\nimport { getDataFromExcel } from \"./helpers\";\nimport \"./App.css\";\nimport schema from \"./schema\";\nimport { JsonEditor as Editor } from \"jsoneditor-react\";\nimport \"jsoneditor-react/es/editor.min.css\";\n\nconst defaultText = `[\n  {\n    \"field\": \"顧客番号\",\n    \"required\": true,\n    \"type\": \"number\"\n  },\n  {\n    \"field\": \"顧客名\",\n    \"required\": true\n  },\n  {\n    \"field\": \"代表者名\",\n    \"required\": true\n  },\n\n  {\n    \"field\": \"Test\",\n    \"required\": true,\n    \"values\": [\"DGM\", \"ABC\", \"DEF\"]\n  }\n]`;\n\nfunction App() {\n  const inputRef = useRef(null);\n  const [schemaText, setSchemaText] = useState(defaultText);\n  const [errors, setErrors] = useState([]);\n\n  const validateSchema = () => {\n    if (!schemaText) {\n      return false;\n    }\n    try {\n      JSON.parse(schemaText);\n\n      return true;\n    } catch (e) {\n      console.log(e);\n      return false;\n    }\n  };\n\n  const onSchemaChange = (e) => {\n    setSchemaText(e.target.value);\n  };\n\n  const getSchema = () => {\n    return JSON.parse(schemaText);\n  };\n\n  const validate = async () => {\n    if (!inputRef.current?.files?.[0]) {\n      alert(\"Vui lòng chọn file\");\n      return;\n    }\n    if (!validateSchema()) {\n      alert(\"Lỗi schema\");\n      return;\n    }\n    const errors = [];\n    const warnings = [];\n    const { data, header } = await getDataFromExcel(inputRef.current.files[0]);\n    //Validate Header\n    getSchema().forEach((item) => {\n      if (item.required && !header.includes(item.field)) {\n        errors.push(`Không tìm thấy header ${item.field}`);\n      }\n\n      //validate required\n      for (let i = 0; i < data.length; i++) {\n        const row = data[i];\n        const value = row[item.field];\n        if (\n          item.required &&\n          row[item.field] === undefined &&\n          header.includes(item.field)\n        ) {\n          errors.push(`Không tìm thấy data ${item.field} (dòng ${i + 1})`);\n        }\n        //validate data type\n        if (\n          item.type === \"number\" &&\n          header.includes(item.field) &&\n          isNaN(parseInt(value))\n        ) {\n          errors.push(`Dữ liệu không phải là số ${item.field} (dòng ${i + 1})`);\n        }\n        //Validate value\n        if (\n          item.values &&\n          !item.values.includes(value) &&\n          header.includes(item.field)\n        ) {\n          errors.push(\n            `${value} Không nằm trong giá trị cho trước ${item.field} (dòng ${\n              i + 1\n            })`\n          );\n        }\n      }\n    });\n    setErrors(errors);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <input ref={inputRef} type=\"file\" />\n        <textarea\n          onChange={onSchemaChange}\n          value={schemaText}\n          rows=\"20\"\n          cols=\"65\"\n        />\n        <button onClick={validate}>Validate</button>\n        {errors.length > 0 && (\n          <div className=\"erorrs\">\n            <ul>\n              {errors.map((error, index) => (\n                <li key={index}>{error}</li>\n              ))}\n            </ul>\n          </div>\n        )}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}